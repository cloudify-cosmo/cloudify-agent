@echo off

echo Installing the agent as a windows service...

{{ nssm_path }} install {{ name }} {{ virtualenv_path }}\Scripts\celeryd.exe ^
--events -Q {{ queue }} ^
--hostname={{ name }} ^
--concurrency={{ max_workers }} ^
--maxtasksperchild=10 ^
--without-gossip ^
--without-mingle ^
--loglevel={{ log_level }} ^
--logfile="""{{ log_file }}""" ^
--include=cloudify.dispatch ^
--config=cloudify.broker_config ^
-Ofair ^
--with-gate-keeper ^
--gate-keeper-bucket-size={{ max_workers }} ^
--with-logging-server ^
--logging-server-logdir="""{{ workdir }}\logs"""

if %errorlevel% neq 0 exit /b %errorlevel%

echo Setting service environment

{{ nssm_path }} set {{ name }} AppEnvironmentExtra ^
REST_HOST={{ rest_host }} ^
REST_PORT={{ rest_port }} ^
LOCAL_REST_CERT_FILE="{{ local_rest_cert_file }}" ^
CLOUDIFY_CLUSTER_SETTINGS_PATH="{{ cluster_settings_path|default('') }}" ^
MANAGER_FILE_SERVER_URL=https://{{ rest_host }}:{{ rest_port }}/resources ^
CLOUDIFY_DAEMON_NAME="{{ name }}" ^
CLOUDIFY_DAEMON_STORAGE_DIRECTORY="{{ storage_dir }}" ^
CLOUDIFY_DAEMON_USER={{ user }} ^
CELERY_WORK_DIR="{{ workdir }}" ^
CELERY_APP=cloudify_agent.app.app ^
CELERY_TASK_SERIALIZER=json ^
CELERY_RESULT_SERIALIZER=json ^ {{ custom_environment }} ^
CFY_EXEC_TEMP={{ executable_temp_path }}

{{ nssm_path }} set {{ name }} DisplayName "Cloudify Agent - {{ name }}"
{{ nssm_path }} set {{ name }} Description "Cloudify Agent Service"

if %errorlevel% neq 0 exit /b %errorlevel%

echo Configuring startup policy...

sc config {{ name }} start= {{ startup_policy }}

if %errorlevel% neq 0 exit /b %errorlevel%

echo Configuring failure policy...

sc failure {{ name }} reset= {{ failure_reset_timeout }} actions= restart/{{ failure_restart_delay }}

if %errorlevel% neq 0 exit /b %errorlevel%

echo Cloudify Agent configured successfully as a Windows Service ({{ name }})
