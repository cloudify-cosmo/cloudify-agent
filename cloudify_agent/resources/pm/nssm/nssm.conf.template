@echo off

echo Installing the agent as a windows service...

{{ nssm_path }} install {{ name }} {{ virtualenv_path }}\Scripts\celeryd.exe ^
--events -Q {{ queue }} ^
--hostname={{ name }} ^
--autoscale={{ max_workers }},{{ min_workers }} ^
--maxtasksperchild=10 ^
--without-gossip ^
--without-mingle ^
--loglevel={{ log_level }} ^
--pidfile={{ pid_file }} ^
--logfile={{ log_file }} ^
--include={{ includes }} ^
-Ofair

if %errorlevel% neq 0 exit /b %errorlevel%

echo Setting service environment

{{ nssm_path }} set {{ name }} AppEnvironmentExtra ^
MANAGEMENT_IP={{ manager_ip }} ^
MANAGER_REST_PORT={{ manager_port }} ^
MANAGER_FILE_SERVER_URL=http://{{ manager_ip }}:53229 ^
MANAGER_FILE_SERVER_BLUEPRINTS_ROOT_URL=http://{{ manager_ip }}:53229/blueprints ^
CLOUDIFY_DAEMON_NAME={{ name }} ^
CLOUDIFY_DAEMON_STORAGE_DIRECTORY={{ storage_dir }} ^
CLOUDIFY_DAEMON_USER={{ user }} ^
CELERY_WORK_DIR={{ workdir }} ^
CELERY_BROKER_URL={{ broker_url }} ^
CELERY_APP=cloudify_agent.app.app ^
CELERY_TASK_SERIALIZER=json ^
CELERY_RESULT_SERIALIZER=json ^
CELERY_RESULT_BACKEND={{ broker_url }} ^ {{ custom_environment }}

if %errorlevel% neq 0 exit /b %errorlevel%

echo Configuring startup policy...

sc config {{ name }} start= {{ startup_policy }}

echo Configuring failure policy...

sc failure {{ name }} reset= {{ failure_reset_timeout }} actions= restart/{{ failure_restart_delay }}

if %errorlevel% neq 0 exit /b %errorlevel%

echo Cloudify Agent configured successfully as a Windows Service ({{ name }})
