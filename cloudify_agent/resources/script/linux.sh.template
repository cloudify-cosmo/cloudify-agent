#! /bin/bash -e

{% if add_ssl_cert %}
add_ssl_cert()
{
    # Create all the directories in the path to the cert file
    mkdir -p $(dirname {{ ssl_cert_path }})
    echo "{{ ssl_cert_content }}" > {{ ssl_cert_path }}
}
export -f add_ssl_cert
{% endif %}

export_daemon_env()
{
    export_agent_cli_env
    {% for env_key, env_value in daemon_env.iteritems() %}
        export {{ env_key }}={{ env_value }}
    {% endfor %}
}
export -f export_daemon_env


export_agent_cli_env()
{
    local agent_env_bin={{ conf.envdir }}/bin
    export AGENT_PYTHON_INTERPRETER=${agent_env_bin}/python
    export AGENT_CLI=${agent_env_bin}/cfy-agent
    export PATH=${agent_env_bin}:$PATH
    export CLOUDIFY_DAEMON_NAME={{ conf.name }}

}
export -f  export_agent_cli_env


#####################################################
###################### Install ######################
#####################################################

{% if install %}
download()
{
    echo "Downloading $1..."
    if command -v wget > /dev/null 2>&1; then
        wget $1 -O $2 --header="{{ auth_token_header }}: {{ auth_token_value }}" --ca-certificate {{ ssl_cert_path }}
    elif command -v curl > /dev/null 2>&1; then
        STATUS_CODE=$(curl -L -o $2 --write-out "%{http_code}" $1 -H "{{ auth_token_header }}: {{ auth_token_value }}" --cacert {{ ssl_cert_path }})
        if [ "${STATUS_CODE}" -ne "200" ] ; then
            echo >&2 "Received unexpected HTTP response code (${STATUS_CODE}). Response data was saved into $2."
            return 1
        fi
    else
        echo >&2 "error: wget/curl not found. cannot download agent package"; return 1
    fi
    echo "Download ended successfully"
}
export -f download

package_url()
{
    if [[ ! -z "{{ conf.package_url }}" ]]; then
        echo "{{ conf.package_url }}"
    else
        local distro="$(python -c 'import sys, platform; sys.stdout.write(platform.dist()[0].lower())')"
        local distro_codename="$(python -c 'import sys, platform; sys.stdout.write(platform.dist()[2].lower())')"
        echo "{{ file_server_url }}/packages/agents/${distro}-${distro_codename}-agent.tar.gz"
    fi
}
export -f package_url

download_and_extract_agent_package()
{
    temp_pkg_dir=$(mktemp -d)
    pkg_loc=${temp_pkg_dir}/agent.tar.gz
    download $(package_url) ${pkg_loc}
    mkdir -p {{ conf.agent_dir }}
    tar xzf ${pkg_loc} --strip=1 -C {{ conf.agent_dir }}
    rm -rf ${temp_pkg_dir}
}
export -f download_and_extract_agent_package

install_agent()
{
    {% if add_ssl_cert %}
    su {{ conf.user }} --shell /bin/bash -c "set -e; add_ssl_cert"
    {% endif %}
    su {{ conf.user }} --shell /bin/bash -c "set -e; download_and_extract_agent_package"
}
export -f install_agent
{% endif %}

#######################################################
###################### Configure ######################
#######################################################

{% if configure %}

configure_virtualenv()
{
    export_daemon_env
    # configure command is run explicily as the virtualenv has not been "fixed"
    # yet
    ${AGENT_PYTHON_INTERPRETER} ${AGENT_CLI} configure --relocated-env
}
export -f configure_virtualenv

disable_requiretty()
{
    {% if conf.disable_requiretty %}
        export_daemon_env
        cfy-agent configure --disable-requiretty --no-sudo
    {% else %}
        echo "Skipping disable_requiretty part"
    {% endif %}
}
export -f disable_requiretty

configure_agent()
{
    su {{ conf.user }} --shell /bin/bash -c "set -e; configure_virtualenv"
    disable_requiretty
}
export -f configure_agent
{% endif %}

###################################################
###################### Start ######################
###################################################

{% if start %}
create_custom_env_file()
{
    {% if custom_env is not none %}
    cat <<EOF > {{ custom_env_path }}
#!/bin/bash
{% for env_key, env_value in custom_env.iteritems() %}
export {{ env_key }}="{{ env_value }}"
{% endfor %}
EOF
    {% else %}
        echo "No custom env configured"
    {% endif %}
}
export -f create_custom_env_file

start_daemon()
{
    export_daemon_env
    if ! cfy-agent daemons list | grep -x "${CLOUDIFY_DAEMON_NAME}"; then
        cfy-agent daemons create {{ pm_options }}
    else
        echo "Agent already created, skipping create agent."
    fi

    cfy-agent daemons create {{ pm_options }}

    cfy-agent daemons configure
    cfy-agent daemons start
}
export -f start_daemon

start_agent()
{
    su {{ conf.user }} --shell /bin/bash -c "set -e; create_custom_env_file"
    su {{ conf.user }} --shell /bin/bash -c "set -e; start_daemon"
}
export -f start_agent
{% endif %}

main()
{
    {% if install %}
    install_agent
    {% endif %}
    {% if configure %}
    configure_agent
    {% endif %}
    {% if start %}
    start_agent
    {% endif %}
}
export -f main
{% if tmpdir %}
export TMPDIR={{ tmpdir }}
{% endif %}
main
