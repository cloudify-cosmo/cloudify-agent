#!/bin/bash

# This script downloads, installs, and starts a Cloudify Agent.
# The agent is installed into {{ conf.basedir }}, then a service is
# created using the configured process management system, and started.

# no `set -x` for this script, because we could display some values that
# we'd prefer stay hidden, such as the rest token
set -euo pipefail

# Set all variables up front, using templating (templating is never used
# in this script afterwards)
PROCESS_MANAGEMENT="{{ conf.process_management.name }}"
BASE_DIR="{{ conf.basedir }}"
AGENT_DIR="{{ conf.agent_dir }}"
AGENT_USER="{{ conf.user }}"
AGENT_NAME="{{ conf.name }}"
REST_CERT="{{ conf.rest_ssl_cert }}"
AUTH_TOKEN_VALUE="{{ auth_token_value }}"
PACKAGE_URL="{{ conf.package_url }}"
FILE_SERVER_URL="{{ conf.file_server_url }}"
DEBUG_FLAG="{{ 'true' if debug_flag }}"
REST_HOST="{{ conf.rest_host | join(',') }}"
REST_PORT="{{ conf.rest_port }}"
TENANT_NAME="{{ tenant_name }}"
BYPASS_MAINTENANCE="{{ 'true' if bypass_maintenance }}"
DO_DISABLE_REQUIRETTY="{{ 'true' if conf.disable_requiretty }}"
DO_ADD_SSL_CERT="{{ 'true' if add_ssl_cert }}"
DO_INSTALL="{{ 'true' if install }}"
DO_START="{{ 'true' if start }}"
LOG_FILE="/var/log/cloudify/agent-install.log"

# if process management system wasn't selected by the user explicitly,
# default to whatever is available
if [ -z "${PROCESS_MANAGEMENT}" ]; then
    if command -v systemctl > /dev/null 2>&1; then
        PROCESS_MANAGEMENT="systemd"
    else
        PROCESS_MANAGEMENT="init.d"
    fi
fi

# if agent dir wasn't selected by the user explicitly, default to
# <homedir>/<name>
if [ -z "${AGENT_DIR}" ]; then
    # this sets AGENT_DIR to the expanded value of ~user/name,
    # e.g. /home/user/agentname_123
    eval AGENT_DIR="$(printf "~%q/%q" "${AGENT_USER}" "${AGENT_NAME}")"
fi

MYSELF="$(whoami)"

# log arguments to stderr
# We don't have `set -x` in this script, so we must make sure to log very
# diligently.`
log()
{
    echo >&2 "$(date -Iseconds) ${*}"
}

# run_as_user/run_as_root - note that this script is usually run in one of two
# cases:
# - as root, e.g. via cloudinit (install_method = init_script or plugin), in
#   which case we don't need to do anything to run as root, but we do need to
#   drop down to become the user (using `su`), in order to run things that
#   write to the agent user's homedir (so that the files are owned
#   by that user)
# - as agent_user (usually in case of install_method = remote, via ssh),
#   in which case we need to sudo in order to run system-wide things,
#   i.e. installing the agent package into a system-wide location (like /opt),
#   and creating a daemon service
run_as_user()
{
    if [ "${MYSELF}" = "${AGENT_USER}" ]; then
        # `sg` to`explicitly run as the cfyagent group, so that we are in that
        # group indeed. If we just created the cfyagent group, then the current
        # shell session won't have it yet.
        # sg only takes one argument, so stringify the command using $*
        sg cfyagent "${*}"
    else
        su "${AGENT_USER}" <<< "${@}"
    fi
}

run_as_root()
{
    if [ "$MYSELF" = "root" ]; then
        "${@}"
    else
        sudo "${@}"
    fi
}

# prepare_installation creates the cfyagent group, who will own the agent
# package, and creates a directory into which the agent will be downloaded
prepare_installation()
{
    log "Creating the cfyagent group"
    run_as_root groupadd -f cfyagent
    log "Adding the user ${AGENT_USER} to the cfyagent group"
    run_as_root usermod -a -G cfyagent "${AGENT_USER}"

    if [ -d "${BASE_DIR}" ]; then
        log "Not creating ${BASE_DIR} - already exists"
        return
    fi
    log "Creating ${BASE_DIR}"
    run_as_root install -g cfyagent -m ug+rX -d "${BASE_DIR}"
}


# add_rest_ssl_cert creates the agent dir, and stores the REST-service CA
# certificate in it
add_rest_ssl_cert()
{
    log "Creating agent dir ${AGENT_DIR}"
    run_as_user mkdir -p "${AGENT_DIR}/cloudify/ssl"
    log "Storing the REST-service CA certificate"
    run_as_user tee "${AGENT_DIR}/cloudify/ssl/cloudify_internal_cert.pem" > /dev/null <<<"${REST_CERT}"
}

# download fetches the agent package from a url passed in as the only argument,
# and outputs the received .tgz to stdout.
# wget or curl will be used, whichever is available.
download()
{
    log "Downloading the agent package from $1..."
    if command -v wget > /dev/null 2>&1; then
        log "...using wget"
        wget "$1" -O - --header="Authentication-Token: ${AUTH_TOKEN_VALUE}" -nv --ca-certificate "${AGENT_DIR}/cloudify/ssl/cloudify_internal_cert.pem"
    elif command -v curl > /dev/null 2>&1; then
        log "...using curl"
        curl -g -f -L "$1" -H "Authentication-Token: ${AUTH_TOKEN_VALUE}" --cacert "${AGENT_DIR}/cloudify/ssl/cloudify_internal_cert.pem"
    else
        echo >&2 "error: wget/curl not found. cannot download agent package"
        return 1
    fi
}

# package_url returns the url of the agent package for this machine
package_url()
{
    # if the user explicitly provided a package url, let's just use that
    if [ "${PACKAGE_URL}" ]; then
        log "Using preconfigured agent package url: ${PACKAGE_URL}"
        echo "${PACKAGE_URL}"
    else
        # figure out what architecture are we on (x86_64 or aarch)
        local python_bin
        local architecture
        local url
        python_bin="$(which python3 || which python)"
        architecture="$($python_bin -c 'import sys, platform; sys.stdout.write(platform.machine().lower())')"
        url="${FILE_SERVER_URL}/packages/agents/manylinux-${architecture}-agent.tar.gz"
        log "Using agent package url: ${url}"
        echo "${url}"
    fi
}

# disable_requiretty edits sudo settings to disable requiretty
# this is so that the agent is then free to use sudo in its scripts/plugins.
# This function only makes sense when we're already root, because if we can't
# run sudo in the first place (due to it requiring tty), then how can we
# possibly edit sudo settings...
disable_requiretty()
{
    if [ "$MYSELF" = "root" ]; then
        log "Disabling requiretty"
        if grep -i ubuntu /proc/version > /dev/null; then
            # ubuntu
            if grep -q -E '[^!]requiretty' /etc/sudoers; then
                echo "Defaults:${AGENT_USER} !requiretty" | tee "/etc/sudoers.d/{AGENT_USER}" >/dev/null
                chmod 0440 "/etc/sudoers.d/${AGENT_USER}"
            else
                echo >&2 "No requiretty directive found, nothing to do"
            fi
        else
            # other - modify sudoers file
            if [ ! -f "/etc/sudoers" ]; then
                echo >&2 "sudoers file not found in /etc/sudoers"
                return 1
            fi
            sed -i 's/^Defaults.*requiretty/#&/g' /etc/sudoers
        fi
    fi
}

# start_daemon creates and starts the service using the configured process
# management system
# In case of detach, we don't need root, but in case of systemd/initd, we do.
start_daemon()
{
    create_args=(
        daemons create
        --name "${AGENT_NAME}"
        --user "${AGENT_USER}"
    )
    start_args=(
        daemons start
        --name "${AGENT_NAME}"
        --user "${AGENT_USER}"
    )

    if [ "${DEBUG_FLAG}" ]; then
        create_args=(--debug "${create_args[@]}")
        start_args=(--debug "${start_args[@]}")
    fi

    log "Process management system: ${PROCESS_MANAGEMENT}"
    if [ "${PROCESS_MANAGEMENT}" = "detach" ]; then
        log "Creating the daemon (as ${AGENT_USER})"
        run_as_user "${BASE_DIR}/env/bin/cfy-agent" "${create_args[@]}"
        log "Starting the daemon (as ${AGENT_USER})"
        run_as_user "${BASE_DIR}/env/bin/cfy-agent" "${start_args[@]}"
    else
        log "Creating the daemon (as root)"
        run_as_root "${BASE_DIR}/env/bin/cfy-agent" "${create_args[@]}"
        log "Creating the daemon (as root)"
        run_as_root "${BASE_DIR}/env/bin/cfy-agent" "${start_args[@]}"
    fi
}

main()
{
    run_as_root mkdir -p "$(dirname ${LOG_FILE})"
    log "Installing agent ${AGENT_NAME}"

    prepare_installation

    if [ "${DO_DISABLE_REQUIRETTY}" ]; then
        disable_requiretty
    fi

    if [ "${DO_ADD_SSL_CERT}" ]; then
        add_rest_ssl_cert
    fi

    if [ "${DO_INSTALL}" ]; then
        download "$(package_url)" | run_as_root tar --group=cfyagent -xzf - --strip=1 -C "${BASE_DIR}"
        log "Fixing agent package shebangs"
        run_as_root "${BASE_DIR}/env/bin/python" "${BASE_DIR}/env/bin/cfy-agent" configure --fix-shebangs
    fi

    setup_args=(
        --name "${AGENT_NAME}"
        --rest-hosts "${REST_HOST}"
        --rest-port "${REST_PORT}"
        --rest-ca-path "${AGENT_DIR}/cloudify/ssl/cloudify_internal_cert.pem"
        --tenant-name "${TENANT_NAME}"
        --rest-token "${AUTH_TOKEN_VALUE}"
        --agent-dir "${AGENT_DIR}"
        --process-management "${PROCESS_MANAGEMENT}"
    )
    if [ "${BYPASS_MAINTENANCE}" ]; then
        setup_args+=("--bypass-maintenance")
    fi

    log "Preparing the agent"
    log "Manager address: ${REST_HOST};  port: ${REST_PORT}"
    run_as_user "${BASE_DIR}/env/bin/cfy-agent" setup "${setup_args[@]}"

    # inspect so that the user can reference agent settings in the logfile
    # (inspect hides "secret" settings)
    run_as_user "${BASE_DIR}/env/bin/cfy-agent" daemons inspect --name "${AGENT_NAME}"

    if [ "${DO_START}" ]; then
        start_daemon
    fi

    log "Agent started successfully!"
}

main 2>&1 | run_as_root tee "$LOG_FILE"