#ps1_sysnative

# All output should be UTF-8 (default is UTF-16).
$PSDefaultParameterValues['*:Encoding'] = 'utf8'

Set-StrictMode -Version 1.0

# Stop whenever a non-terminating cmdlet generates an error.
$ErrorActionPreference = "Stop"

function AddSSLCert()
{
    # Make sure the cert directory exists
    New-Item -ItemType directory -Force -Path "{{ conf.basedir }}\{{ conf.name }}\cloudify\ssl"

    # Create a new file with the certificate content
    New-Item "{{ conf.basedir }}\{{ conf.name }}\cloudify\ssl\cloudify_internal_cert.pem" -type file -force -value "{{ conf.rest_ssl_cert }}"

    # Add the certificate to the root cert store
    Import-Certificate -FilePath "{{ conf.basedir }}\{{ conf.name }}\cloudify\ssl\cloudify_internal_cert.pem" -CertStoreLocation Cert:\LocalMachine\Root
}

function run {
    # Use this to get set -e alike behaviour, rather than running commands directly
    & $args[0] $args[1..($args.Length)]
    if ($LastExitCode -ne 0) {
        Write-Error "Error running @args"
    }
}

{% if install %}
function Download($Url, $OutputPath)
{
    Write-Host "Downloading $URL to $OutputPath"
    Write-Host "Ensuring download destination dir exists"
    # Make sure the output directory exists
    New-Item -ItemType directory -Force -Path (Split-Path $OutputPath)

    Write-Host "Ensuring TLS 1.2 is used"
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Write-Host "Performing download with auth header"
    Invoke-RestMethod -Uri $Url -Headers @{ 'Authentication-Token' = '{{ auth_token_value }}' } -OutFile $OutputPath
}

function InstallAgent()
{
    if (-Not (Test-Path "{{ conf.basedir }}\Scripts")) {
        Write-Host "Installing cloudify agent package"
        {% if conf.package_url %}
        Download "{{ conf.package_url }}" "{{ conf.basedir }}\cloudify-windows-agent-package.exe"
        {% else %}
        Download "{{ conf.file_server_url }}/packages/agents/cloudify-windows-agent.exe" "{{ conf.basedir }}\cloudify-windows-agent-package.exe"
        {% endif %}
        # This call is not blocking so we pipe the output to null to make it blocking
        # There's no point trying to pipe it to not null because in the event it has problems it will
        # make a dialog box despite all the flags telling it we really want it to not do stuff like that.
        Write-Host 'Starting install using "{{ conf.basedir }}\cloudify-windows-agent-package.exe"'
        & "{{ conf.basedir }}\cloudify-windows-agent-package.exe" /SILENT /VERYSILENT /SUPPRESSMSGBOXES | Out-Null
    } else {
        Write-Host "Agent package already installed"
    }
}
{% endif %}

function SetupAgent()
{
    run "{{ conf.basedir }}\Scripts\cfy-agent.exe" setup `
        --name "{{ conf.name}}" `
        --rest-hosts "{{ conf.rest_host | join(',') }}" `
        --rest-port "{{ conf.rest_port }}" `
        --rest-ca-path "{{ conf.basedir }}\{{ conf.name }}\cloudify\ssl\cloudify_internal_cert.pem" `
        --tenant-name "{{ tenant_name }}" `
        --rest-token "{{ auth_token_value }}" `
        --agent-dir "{{ conf.basedir }}\{{ conf.name }}" `
        --process-management "nssm"
}


{% if start %}
function StartAgent()
{
    if (-Not (run "{{ conf.basedir }}\Scripts\cfy-agent.exe" daemons list | Select-String {{ conf.name }})) {
        Write-Host "Creating daemon..."
        run "{{ conf.basedir }}\Scripts\cfy-agent.exe" {{ debug_flag }} daemons create
        Write-Host "Daemon created successfully"
    } else {
        Write-Host "Agent already created, skipping create agent."
    }

    Write-Host "Starting daemon..."
    run "{{ conf.basedir }}\Scripts\cfy-agent.exe" {{ debug_flag }} daemons start
    Write-Host "Daemon started successfully"
}
{% endif %}


function Main()
{

    $LogDir = $env:ProgramData + "\Cloudify\cloudify-agent\logs"
    $LogFile = $LogDir + "\{{ conf.name }}-install.log"

    If (!(test-path $LogDir))
    {
        Write-Host "Creating directory: $LogDir"
        New-Item -ItemType Directory -Path $LogDir
    }

    {% if add_ssl_cert %}
    AddSSLCert
    {% endif %}

    {% if install %}
    InstallAgent
    {% endif %}
    SetupAgent
    {% if start %}
    StartAgent
    {% endif %}
}

Main