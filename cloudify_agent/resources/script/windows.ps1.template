#ps1_sysnative

$ErrorActionPreference = "Stop"

{% if add_ssl_cert %}
function AddSSLCert()
{
    # Make sure the output directory exists
    New-Item -ItemType directory -Force -Path (Split-Path "{{ ssl_cert_path }}")

    # Create a new file with the certificate content
    New-Item "{{ ssl_cert_path }}" -type file -force -value "{{ ssl_cert_content }}"

    # Add the certificate to the root cert store
    Import-Certificate -FilePath "{{ ssl_cert_path }}" -CertStoreLocation Cert:\LocalMachine\Root
}
{% endif %}


{% if install %}
function Download($Url, $OutputPath)
{
    # Make sure the output directory exists
    New-Item -ItemType directory -Force -Path (Split-Path $OutputPath)

    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    $WebClient = New-Object System.Net.WebClient
    $WebClient.Headers.add('{{ auth_token_header }}', '{{ auth_token_value }}')
    $WebClient.DownloadFile("$Url", "$OutputPath")
}

function InstallAgent()
{
    {% if add_ssl_cert %}
    AddSSLCert
    {% endif %}
    Download "{{ conf.package_url }}" "{{ conf.basedir }}\cloudify-windows-agent.exe"
    # This call is not blocking so we pipe the output to null to make it blocking
    & "{{ conf.basedir }}\cloudify-windows-agent.exe" /SILENT /VERYSILENT /SUPPRESSMSGBOXES /DIR="{{ conf.envdir }}" | Out-Null
}
{% endif %}

{% if configure %}
function ExportDaemonEnv()
{
    $env:Path = "{{ conf.envdir }}\Scripts" + ";" + $env:Path
    {% for env_key, env_value in daemon_env.iteritems() %}
        $env:{{ env_key }} = "{{ env_value }}"
    {% endfor %}
}

function CreateCustomEnvFile()
{
    {% if custom_env is not none %}
        Set-Content "{{ custom_env_path }}" ""
        {% for env_key, env_value in custom_env.iteritems() %}
             Add-Content "{{ custom_env_path }}" 'set {{ env_key }}="{{ env_value }}"'
        {% endfor %}
    {% else %}
        Write-Host "No custom env configured"
    {% endif %}
}

function ConfigureAgent()
{
    ExportDaemonEnv
    CreateCustomEnvFile
    cfy-agent configure {{ configure_flags }}
}
{% endif %}

{% if start %}
function StartAgent()
{
    cfy-agent daemons create {{ pm_options }}
    cfy-agent daemons configure
    cfy-agent daemons start
}
{% endif %}


function Main()
{
    {% if install %}
    InstallAgent
    {% endif %}
    {% if configure %}
    ConfigureAgent
    {% endif %}
    {% if start %}
    StartAgent
    {% endif %}
}

Main
