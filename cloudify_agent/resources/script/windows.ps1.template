#ps1_sysnative

$ErrorActionPreference = "Stop"

function Download($Url, $OutputPath)
{
    $WebClient = New-Object System.Net.WebClient
    $WebClient.Headers.add('{{ auth_token_header }}', '{{ auth_token_value }}')
    $WebClient.DownloadFile("$Url", "$OutputPath")
}

function PatchCloudifyAgent($Branch)
{
    $DownloadUrl = "https://github.com/cloudify-cosmo/cloudify-agent/archive/$Branch.zip"
    $DownloadOutputPath = "{{ conf.basedir }}\cloudify-agent.zip"
    $ExtractedTo = "{{ conf.basedir }}\cloudify-agent-git"
    Download $DownloadUrl $DownloadOutputPath
    New-Item -ItemType directory -Path $ExtractedTo
    Add-Type -Assembly "System.IO.Compression.FileSystem"
    [IO.Compression.ZipFile]::ExtractToDirectory($DownloadOutputPath, $ExtractedTo)
    Copy-Item "$ExtractedTo\cloudify-agent-$Branch\cloudify_agent" "{{ conf.agent_dir }}\Lib\site-packages" -Recurse -Force
}

function AddSSLCert()
{
    New-Item {{ ssl_cert_path }} -type file -force -value "{{ ssl_cert_content }}"
}

function DownloadAndExtractAgentPackage()
{
    AddSSLCert
    Download {{ conf.package_url }} {{ conf.basedir }}\cloudify-windows-agent.exe
    # This call is not blocking so we pipe the output to null to make it blocking
    {{ conf.basedir }}\cloudify-windows-agent.exe /SILENT /VERYSILENT /SUPPRESSMSGBOXES /DIR={{ conf.agent_dir }} | Out-Null
}

function ExportDaemonEnv()
{
    $env:Path = "{{ conf.agent_dir }}\Scripts" + ";" + $env:Path
    {% for env_key, env_value in daemon_env.iteritems() %}
        $env:{{ env_key }} = "{{ env_value }}"
    {% endfor %}
}

function CreateCustomEnvFile()
{
    {% if custom_env is not none %}
        Set-Content {{ custom_env_path }} ""
        {% for env_key, env_value in custom_env.iteritems() %}
             Add-Content {{ custom_env_path }} "set {{ env_key }}={{ env_value }}"
        {% endfor %}
    {% else %}
        Write-Host "No custom env configured"
    {% endif %}
}

function ConfigureAgent()
{
    cfy-agent configure {{ configure_flags }}
}

function StartDaemon()
{
    cfy-agent daemons create {{ pm_options }}
    cfy-agent daemons configure
    cfy-agent daemons start
}

function InstallAgent()
{
    {% if conf.install_method == 'init_script' %}
        DownloadAndExtractAgentPackage
    {% endif %}
    ExportDaemonEnv
    CreateCustomEnvFile
    {% if conf.install_method == 'init_script' %}
        ConfigureAgent
    {% endif %}
    StartDaemon
}

InstallAgent
