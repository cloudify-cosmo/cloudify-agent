version: 2.1

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi

executors:
  py26:
    docker:
        # staying on old debian image, because buster dropped libssl1.0-dev, which
        # is required to compile py2.6 via pyenv
      - image: circleci/python:2.7.14
      - image: rabbitmq:3.7.4
  py27:
    docker:
      - image: circleci/python:2.7
      - image: rabbitmq:3.7.4
  py36:
    docker:
      - image: circleci/python:3.6
      - image: rabbitmq:3.7.4

commands:
  install_cron:
    steps:
      - run:
          # we install cron to allow use of crontab in tests, but not run it,
          # because we do mock cron in tests
          name: Install and run cron
          command: |
                   sudo apt-get update
                   sudo apt-get install -y cron

  install_test_dependencies:
    parameters:
      cache_prefix:
        type: string
        default: py27
    steps:
      - restore_cache:
          keys:
            - << parameters.cache_prefix >>-venv-{{ checksum "dev-requirements.txt" }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }}
      - run: ~/venv/bin/pip install -r dev-requirements.txt
      - run: ~/venv/bin/pip install -r test-requirements.txt
      - run: ~/venv/bin/pip install -e .
      - save_cache:
          paths:
            - ~/venv
          key: << parameters.cache_prefix >>-dependencies-{{ checksum "dev-requirements.txt" }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }}

  pytest:
    steps:
      - run:
          name: Run unittests
          command: |
            source ~/venv/bin/activate
            ~/venv/bin/pytest --cov-report term-missing --cov=cloudify_agent cloudify_agent

jobs:
  # build the agent, and a rpm containing this single agent, in CI.
  # This can then be used in the cloudify-manager-install's CI, so that
  # in the sanity-check there, the agent built here from branch is used
  build_agent:
    docker:
      - image: centos:7
    steps:
      - checkout
      - run: curl -O https://bootstrap.pypa.io/get-pip.py
      - run: python get-pip.py
      - run: yum install -y python-devel git gcc gcc-c++
      - run: pip install https://github.com/cloudify-cosmo/cloudify-agent-packager/archive/master.zip
      - run: cfy-ap -c packaging/local.yaml -f -v
      - persist_to_workspace:
          root: ~/project
          paths:
            - centos-Core-agent.tar.gz

  build_rpm:
    docker:
      - image: rpmbuild/centos7
    steps:
      - checkout
      - attach_workspace:
          at: ~/rpm
      - run: sudo chmod a+wx /opt
      - run:
          name: Prepare rpm-building environment
          command: |
            curl -o ~/rpm/cloudify-agents.spec https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/cloudify-agents.spec ;
            mkdir -p ~/rpm/packaging/agents/ ;
            curl -o ~/rpm/packaging/agents/copy_packages.py https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/agents/copy_packages.py ;
            curl -O https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/version_info ;
            cat version_info >> $BASH_ENV
      - run:
          name: Building a CI agent rpm
          command: |
            rpmbuild \
              -D "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" \
              -D "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" \
              -bb ~/rpm/cloudify-agents.spec
      - store_artifacts:
          path: ~/rpm/noarch/
          destination: result

  flake8:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run: pip install flake8 --user
      - run: flake8 cloudify_agent

  flake8_py36:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: pip install flake8 --user
      - run: flake8 cloudify_agent

  py26:
    executor: py26
    steps:
      - checkout
      - run:
          name: Install and set python version with pyenv
          command: |
                   git clone https://github.com/yyuu/pyenv.git ~/.pyenv
                   export PYENV_ROOT="$HOME/.pyenv"
                   export PATH="$PYENV_ROOT/bin:$PATH"
                   sudo apt-get update
                   sudo apt-get install -y build-essential zlib1g-dev xz-utils
                   pyenv install 2.6.9
                   pyenv local 2.6.9
      - run:
          # python 2.6 will require pyyaml to be built, rather than installed
          # from a wheel, and so we need to provide headers
          name: Install python headers
          command: sudo apt-get install libpython-dev
      - install_cron
      - run: pip install virtualenv==15.1.0 --user
      - run: ~/.local/bin/virtualenv ~/venv
      - install_test_dependencies:
          cache_prefix: py26
      - pytest

  py27:
    executor: py27
    steps:
      - checkout
      - install_cron
      - run: pip install virtualenv==15.1.0 --user
      - run: virtualenv ~/venv
      - install_test_dependencies
      - pytest

  py36:
    executor: py36
    steps:
      - checkout
      - install_cron
      - run: virtualenv ~/venv
      - install_test_dependencies:
          cache_prefix: py36
      - pytest

  py3_compat:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run:
          name: install futurize
          command: pip install future --user
      - run:
          name: find python3-incompatible code
          command: |
            FUTURIZE="futurize ."
            while read line; do
              FUTURIZE="${FUTURIZE} ${line}"
            done<.circleci/py3fixers
            $FUTURIZE>futurize_diffs
      - run:
          name: check that there is no python3-incompatible code
          command: |
            if [[ -s futurize_diffs ]]; then
              echo "Python-3-incompatible code found"
              cat futurize_diffs
              exit 1
            fi

workflows:
  version: 2

  run_test:
    jobs: &build_jobs
      - py3_compat
      - flake8
      - flake8_py36
      - py26
      - py27
      - py36
      - build_agent
      - build_rpm:
          requires:
            - build_agent
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *build_jobs
