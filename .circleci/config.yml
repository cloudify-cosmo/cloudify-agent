version: 2.1

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi

defaults:
  - &test_defaults
    docker:
    # We use specifically this python image version, because there is a conflicting change in the latest python image
    # that wrongly influence them.
      - image: circleci/python:2.7.14
      - image: rabbitmq:3.7.7

    steps:
      - checkout
      - run:
          name: Install and run cron
          command: sudo apt-get install cron
      - run:
          name: Run cron
          command: sudo /etc/init.d/cron start
      - run:
          name: Install and run tox
          command: |
                   sudo pip install tox
                   python -m tox -e ${TOX_TEST}
      - run:
          name: Push coverage data to codecov
          command: bash <(curl -s https://codecov.io/bash) -F $TOX_TEST

  - &test_defaults_for_python26
    # We use specifically this python image version, because there is a conflicting change in the latest python image
    # that wrongly influence them.
    docker:
      - image: circleci/python:2.7.14
      - image: rabbitmq:3.7.7
    steps:
      - checkout
      - run:
          name: Install and set python version with pyenv
          command: |
                   git clone https://github.com/yyuu/pyenv.git ~/.pyenv
                   export PYENV_ROOT="$HOME/.pyenv"
                   export PATH="$PYENV_ROOT/bin:$PATH"
                   sudo apt-get install -y build-essential zlib1g-dev xz-utils
                   pyenv install 2.6.9
                   pyenv local 2.6.9
      - run:
          name: Install and run cron
          command: sudo apt-get install cron
      - run:
          name: Run cronâ€“
          command: sudo /etc/init.d/cron start
      - run:
          name: Install tox, NOTICE we use an old version of tox for supporting py26
          command: sudo ~/.pyenv/versions/2.6.9/bin/pip install tox
      - run:
          name: Run tox of specfic environment
          command: ~/.pyenv/versions/2.6.9/bin/tox -e $TOX_TEST
      - run:
          name: Push coverage data to codecov
          command: bash <(curl -s https://codecov.io/bash) -F $TOX_TEST

jobs:
  # build the agent, and a rpm containing this single agent, in CI.
  # This can then be used in the cloudify-manager-install's CI, so that
  # in the sanity-check there, the agent built here from branch is used
  build_agent:
    docker:
      - image: centos:7
    steps:
      - checkout
      - run: curl -O https://bootstrap.pypa.io/get-pip.py
      - run: python get-pip.py
      - run: yum install -y python-devel git gcc gcc-c++
      - run: pip install https://github.com/cloudify-cosmo/cloudify-agent-packager/archive/master.zip
      - run: cfy-ap -c packaging/local.yaml -f -v
      - persist_to_workspace:
          root: ~/project
          paths:
            - centos-Core-agent.tar.gz

  build_rpm:
    docker:
      - image: rpmbuild/centos7
    steps:
      - checkout
      - attach_workspace:
          at: ~/rpm
      - run: sudo chmod a+wx /opt
      - run:
          name: Prepare rpm-building environment
          command: |
            curl -o ~/rpm/cloudify-agents.spec https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/cloudify-agents.spec ;
            mkdir -p ~/rpm/packaging/agents/ ;
            curl -o ~/rpm/packaging/agents/copy_packages.py https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/agents/copy_packages.py ;
            curl -O https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/version_info ;
            cat version_info >> $BASH_ENV
      - run:
          name: Building a CI agent rpm
          command: |
            rpmbuild \
              -D "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" \
              -D "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" \
              -bb ~/rpm/cloudify-agents.spec
      - store_artifacts:
          path: ~/rpm/noarch/
          destination: result

  flake8:
    <<: *test_defaults
    environment:
      TOX_TEST: flake8

  docs:
    <<: *test_defaults
    environment:
      TOX_TEST: docs

  py26:
    <<: *test_defaults_for_python26
    environment:
      TOX_TEST: py26_tests

  py27:
    <<: *test_defaults
    environment:
      TOX_TEST: py27

workflows:
  version: 2

  run_test:
    jobs:
      - flake8
      - docs
      - py26
      - py27
      - build_agent
      - build_rpm:
          requires:
            - build_agent
