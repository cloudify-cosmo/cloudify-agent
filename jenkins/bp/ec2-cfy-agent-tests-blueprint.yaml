tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint deploy EC2 for agent tests
imports:
  - http://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-aws-plugin?version=3.0.3
  - plugin:cloudify-utilities-plugin

inputs:

  aws_region_name:
    type: string
    default: 'eu-west-1'

  availability_zone:
    type: string
    default: 'eu-west-1b'

  instance_type:
    type: string
    default: 't3.medium'

  aws_image_name:
    type: string
    default: 'ami-05cd35b907b4ffe77'

  aws_subnet_id:
    type: string
    default: 'subnet-07896a88a91ea802f'

  aws_vpc_id:
    type: string
    default: 'vpc-0d297ad8218931536'

  aws_security_group_id:
    type: string
    default: 'sg-0bc113600cb5002a2'

  aws_fleet_role:
    type: string
    default: 'arn:aws:iam::263721492972:role/aws-ec2-spot-fleet-tagging-role'

  aws_fleet_iam_instance_profile:
    type: string
    default: 'arn:aws:iam::263721492972:instance-profile/cfyfleetprofile-jenkins-ci/cfyfleetprofile-jenkins-ci'

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: 'ec2-user'

  ssh_keypair:
    type: string
    default: 'agent-tests-key'

  agent_key_name:
    type: string
    default: 'agent_key'

  suffix:
    type: string
    default: '-jenkins-ci'


dsl_definitions:

   client_config: &client_config
    aws_access_key_id: { get_secret:  aws_access_key_id }
    aws_secret_access_key: { get_secret:  aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  fleet:
    type: cloudify.nodes.aws.ec2.SpotFleetRequest
    properties:
      client_config: *client_config
      # agent_config:
      #   install_method: none
      #   user: { get_input: agent_user }
      #   key: { get_attribute: [agent_key, private_key_export] }
      resource_config:
        # ImageId: { get_input:  aws_image_name }
        # InstanceType: { get_input: instance_type }
        kwargs:
          SpotFleetRequestConfig:
            IamFleetRole: arn:aws:iam::263721492972:role/aws-ec2-spot-fleet-tagging-role
            AllocationStrategy: capacityOptimized
            TargetCapacity: 1
            # ValidFrom: 2021-10-21T10:57:23Z
            # ValidUntil: 2022-10-21T10:57:23Z
            # SpotPrice: 0.275
            TerminateInstancesWithExpiration: true
            Type: request
            LaunchSpecifications:
                  - ImageId: ami-05cd35b907b4ffe77
                    InstanceType: t3.medium
                    # SubnetId: subnet-07896a88a91ea802f
                    KeyName: { get_input: ssh_keypair }
                    # agent_config:
                    #   install_method: none
                    #   user: { get_input: agent_user }
                    #   key: { get_attribute: [agent_key, private_key_export] }
                    UserData: { get_attribute: [ cloud_init, cloud_config ] }
                    BlockDeviceMappings:
                      - DeviceName: '/dev/xvda'
                        Ebs: 
                          DeleteOnTermination: true
                          SnapshotId: snap-020ee8a5f94cb76b0
                          VolumeSize: 30
                          Encrypted: false
                          VolumeType: gp2
                    SpotPrice: '0.0456'
                    NetworkInterfaces:
                    - DeviceIndex: 0
                      AssociatePublicIpAddress: true
                      SubnetId: subnet-07896a88a91ea802f
                      Groups:
                      - sg-0bc113600cb5002a2

                  - ImageId: ami-05cd35b907b4ffe77
                    InstanceType: t3a.medium
                    # SubnetId: subnet-07896a88a91ea802f
                    KeyName: { get_input: ssh_keypair }
                    # agent_config:
                    #   install_method: none
                    #   user: { get_input: agent_user }
                    #   key: { get_attribute: [agent_key, private_key_export] }
                    UserData: { get_attribute: [ cloud_init, cloud_config ] }
                    BlockDeviceMappings:
                      - DeviceName: '/dev/xvda'
                        Ebs: 
                          DeleteOnTermination: true
                          SnapshotId: snap-020ee8a5f94cb76b0
                          VolumeSize: 30
                          Encrypted: false
                          VolumeType: gp2
                    SpotPrice: '0.0408'
                    NetworkInterfaces:
                    - DeviceIndex: 0
                      AssociatePublicIpAddress: true
                      SubnetId: subnet-07896a88a91ea802f
                      Groups:
                      - sg-0bc113600cb5002a2

                  - ImageId: ami-05cd35b907b4ffe77
                    InstanceType: t2.medium
                    # SubnetId: subnet-07896a88a91ea802f
                    KeyName: { get_input: ssh_keypair }
                    # agent_config:
                    #   install_method: none
                    #   user: { get_input: agent_user }
                    #   key: { get_attribute: [agent_key, private_key_export] }
                    UserData: { get_attribute: [ cloud_init, cloud_config ] }
                    BlockDeviceMappings:
                      - DeviceName: '/dev/xvda'
                        Ebs: 
                          DeleteOnTermination: true
                          SnapshotId: snap-020ee8a5f94cb76b0
                          VolumeSize: 30
                          Encrypted: false
                          VolumeType: gp2
                    SpotPrice: '0.05'
                    NetworkInterfaces:
                    - DeviceIndex: 0
                      AssociatePublicIpAddress: true
                      SubnetId: subnet-07896a88a91ea802f
                      Groups:
                      - sg-0bc113600cb5002a2

                  - ImageId: ami-05cd35b907b4ffe77
                    InstanceType: t3.large
                    # SubnetId: subnet-07896a88a91ea802f
                    KeyName: { get_input: ssh_keypair }
                    # agent_config:
                    #   install_method: none
                    #   user: { get_input: agent_user }
                    #   key: { get_attribute: [agent_key, private_key_export] }
                    UserData: { get_attribute: [ cloud_init, cloud_config ] }
                    BlockDeviceMappings:
                      - DeviceName: '/dev/xvda'
                        Ebs: 
                          DeleteOnTermination: true
                          SnapshotId: snap-020ee8a5f94cb76b0
                          VolumeSize: 30
                          Encrypted: false
                          VolumeType: gp2
                    SpotPrice: '0.0912'
                    NetworkInterfaces:
                    - DeviceIndex: 0
                      AssociatePublicIpAddress: true
                      SubnetId: subnet-07896a88a91ea802f
                      Groups:
                      - sg-0bc113600cb5002a2

                  # - ImageId: ami-05cd35b907b4ffe77
                  #   InstanceType: m1.large
                  #   # SubnetId: subnet-07896a88a91ea802f
                  #   KeyName: { get_input: agent_key_name }
                  #   UserData: { get_attribute: [ cloud_init, cloud_config ] }
                  #   BlockDeviceMappings:
                  #     - DeviceName: '/dev/xvda'
                  #       Ebs: 
                  #         DeleteOnTermination: true
                  #         SnapshotId: snap-020ee8a5f94cb76b0
                  #         VolumeSize: 30
                  #         Encrypted: false
                  #         VolumeType: gp2
                  #   SpotPrice: '0.19'
                  #   NetworkInterfaces:
                  #   - DeviceIndex: 0
                  #     AssociatePublicIpAddress: true
                  #     SubnetId: subnet-07896a88a91ea802f
                  #     Groups:
                  #     - sg-0bc113600cb5002a2

                  # - ImageId: ami-05cd35b907b4ffe77
                  #   InstanceType: t3a.large
                  #   # SubnetId: subnet-07896a88a91ea802f
                  #   KeyName: { get_input: ssh_keypair }
                  #   UserData: { get_attribute: [ cloud_init, cloud_config ] }
                  #   BlockDeviceMappings:
                  #     - DeviceName: '/dev/xvda'
                  #       Ebs: 
                  #         DeleteOnTermination: true
                  #         SnapshotId: snap-020ee8a5f94cb76b0
                  #         VolumeSize: 30
                  #         Encrypted: false
                  #         VolumeType: gp2
                  #   SpotPrice: '0.0816'
                  #   NetworkInterfaces:
                  #   - DeviceIndex: 0
                  #     AssociatePublicIpAddress: true
                  #     SubnetId: subnet-07896a88a91ea802f
                  #     Groups:
                  #     - sg-0bc113600cb5002a2

                  # - ImageId: ami-05cd35b907b4ffe77
                  #   InstanceType: m2.xlarge
                  #   # SubnetId: subnet-07896a88a91ea802f
                  #   KeyName: { get_input: ssh_keypair }
                  #   UserData: { get_attribute: [ cloud_init, cloud_config ] }
                  #   BlockDeviceMappings:
                  #     - DeviceName: '/dev/xvda'
                  #       Ebs: 
                  #         DeleteOnTermination: true
                  #         SnapshotId: snap-020ee8a5f94cb76b0
                  #         VolumeSize: 30
                  #         Encrypted: false
                  #         VolumeType: gp2
                  #   SpotPrice: '0.275'
                  #   NetworkInterfaces:
                  #   - DeviceIndex: 0
                  #     AssociatePublicIpAddress: true
                  #     SubnetId: subnet-07896a88a91ea802f
                  #     Groups:
                  #     - sg-0bc113600cb5002a2

                  # - ImageId: ami-05cd35b907b4ffe77
                  #   InstanceType: t3.xlarge
                  #   # SubnetId: subnet-07896a88a91ea802f
                  #   # KeyName: { get_input: agent_key_name }
                  #   UserData: { get_attribute: [ cloud_init, cloud_config ] }
                  #   BlockDeviceMappings:
                  #     - DeviceName: '/dev/xvda'
                  #       Ebs: 
                  #         DeleteOnTermination: true
                  #         SnapshotId: snap-020ee8a5f94cb76b0
                  #         VolumeSize: 30
                  #         Encrypted: false
                  #         VolumeType: gp2
                  #   WeightedCapacity: 2
                  #   SpotPrice: '0.0912'
                  #   NetworkInterfaces:
                  #   - DeviceIndex: 0
                  #     AssociatePublicIpAddress: true
                  #     SubnetId: subnet-07896a88a91ea802f
                  #     Groups:
                  #     - sg-0bc113600cb5002a2

                  # - ImageId: ami-05cd35b907b4ffe77
                  #   InstanceType: t3.2xlarge
                  #   # SubnetId: subnet-07896a88a91ea802f
                  #   KeyName: { get_input: agent_key_name }
                  #   UserData: { get_attribute: [ cloud_init, cloud_config ] }
                  #   BlockDeviceMappings:
                  #     - DeviceName: '/dev/xvda'
                  #       Ebs: 
                  #         DeleteOnTermination: true
                  #         SnapshotId: snap-020ee8a5f94cb76b0
                  #         VolumeSize: 30
                  #         Encrypted: false
                  #         VolumeType: gp2
                  #   WeightedCapacity: 4
                  #   SpotPrice: '0.0912'
                  #   NetworkInterfaces:
                  #   - DeviceIndex: 0
                  #     AssociatePublicIpAddress: true
                  #     SubnetId: subnet-07896a88a91ea802f
                  #     Groups:
                  #     - sg-0bc113600cb5002a2
            # IamFleetRole: { get_input: aws_fleet_role }
            # LaunchSpecifications:
            #     - ImageId: { get_input:  aws_image_name }
            #       InstanceType: { get_input: instance_type }
            #       KeyName: { get_input: agent_key_name}
            #       Placement:
            #         AvailabilityZone: { get_input:  availability_zone }
            #       UserData: { get_attribute: [ cloud_init, cloud_config ] }
            #       BlockDeviceMappings:
            #       - DeviceName: '/dev/sda1'
            #         Ebs:
            #           VolumeSize: 30
            #           VolumeType: standard
            #           DeleteOnTermination: True
            #       TagSpecifications:
            #       - ResourceType: instance
            #         Tags:
            #         - Key: Name  
            #           Value: cfy-agent-tests    
            #         - Key: pipeline
            #           Value: cfy-agent-tests
            # TargetCapacity: 1
            # Type: request
            # TerminateInstancesWithExpiration: True
            # ReplaceUnhealthyInstances: False
            # InstanceInterruptionBehavior: terminate
            # InstancePoolsToUseCount: 24
      #use_public_ip: true
    relationships:
    # - type: cloudify.relationships.depends_on
    #   target: nic
    # - type: cloudify.relationships.depends_on
    #   target: floating_ip
    - type: cloudify.relationships.depends_on
      target: cloud_init
    - type: cloudify.relationships.depends_on
      target: vpc
    # - type: cloudify.relationships.depends_on
    #   target: cfy_fleet_profile

  # cfy_fleet_profile:
  #   type: cloudify.nodes.aws.iam.InstanceProfile
  #   properties:
  #     client_config: *client_config
  #     resource_config:
  #       InstanceProfileName: { concat: [ 'cfyfleetprofile', { get_input: suffix } ] }
  #       Path: { concat: [ '/cfyfleetprofile', { get_input: suffix }, '/' ] }
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: cfy_fleet_role

  # cfy_fleet_role:
  #   type: cloudify.nodes.aws.iam.Role
  #   properties:
  #     client_config: *client_config
  #     resource_config:
  #       RoleName: { concat: [ 'cfyfleetrole', { get_input: suffix } ] }
  #       Path: { concat: [ '/cfyfleetrole', { get_input: suffix }, '/' ] }
  #       AssumeRolePolicyDocument:
  #         Version: !!str 2012-10-17
  #         Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: !!str spotfleet.amazonaws.com
  #           Action: !!str sts:AssumeRole
  #   interfaces:
  #     cloudify.interfaces.lifecycle:
  #       create:
  #         inputs:
  #           modify_role_attribute_args:
  #             - PolicyArn: arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: aws_vpc_id }
      resource_config:
        CidrBlock: 10.20.0.0/24

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      encode_base64: true
      resource_config:
        users:
        - name: { get_input: agent_user }
          shell: /bin/bash
          sudo: [ALL=(ALL) NOPASSWD:ALL]
          ssh-authorized-keys:
          - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key
      # - type: cloudify.relationships.depends_on
      #   target: keypair

  agent_key:
      type: cloudify.keys.nodes.RSAKey
      properties:
        resource_config:
          key_name: { get_input: agent_key_name }
          openssh_format: true
        use_secret_store: true
        use_secrets_if_exist: true
      interfaces:
        cloudify.interfaces.lifecycle:
          create:
            implementation: keys.cloudify_ssh_key.operations.create
            inputs:
              store_private_key_material: true

  keypair:
    type: cloudify.nodes.aws.ec2.Keypair
    properties:
      resource_config:
        KeyName: { get_input: ssh_keypair }
        PublicKeyMaterial: { get_attribute: [agent_key, public_key_export] }
        PrivateKeyMaterial: { get_attribute: [agent_key, private_key_export]}
      store_in_runtime_properties: true
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  instance_details:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *client_config
      use_external_resource: true
      use_public_ip: true
      resource_id: { get_attribute: [ fleet, instance_ids, 0 ] }
      agent_config:
        install_method: none
        user: { get_input: agent_user }
        key: { get_attribute: [agent_key, private_key_export] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: fleet
    - type: cloudify.relationships.depends_on
      target: agent_key


    
capabilities:

  endpoint:
    description: The external endpoint of the application.
    value: { get_attribute: [instance_details, public_ip_address] }

  user:
    description: user ID.
    value: { get_input: agent_user }

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] } 
