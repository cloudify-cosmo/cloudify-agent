def configuration = [vaultUrl: "${VAULT_URL}",  vaultCredentialId: "vault-app-role", engineVersion: 2]

def secrets = [
  [path: 'secret/jenkins/cloudifyaws', engineVersion: 2, secretValues: [
    [envVar: 'MANAGER_USERNAME', vaultKey: 'username'],
    [envVar: 'MANAGER_TENANT', vaultKey: 'tenant'],
    [envVar: 'MANAGER_IP', vaultKey: 'ip'],
    [envVar: 'MANAGER_PASSWORD', vaultKey: 'password']]],
]

@Library('pipeline-shared-library') _

def doGetVersion(){
  sh(script: '''#!/bin/sh -e
    . cloudify-agent/packaging/version_info
    echo ${CLOUDIFY_VERSION}
  ''', label: 'get package version', returnStdout: true).trim()
}

def doGetPreRelease(){
  sh(script: '''#!/bin/sh -e
    . cloudify-agent/packaging/version_info
    echo ${CLOUDIFY_PACKAGE_RELEASE}
  ''', label: 'get package release', returnStdout: true).trim()
}

pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }
  options {
    checkoutToSubdirectory('cloudify-agent')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 90, unit: 'MINUTES')
    timestamps()
  }
  environment {
    PROJECT = "cloudify-agent"
    VERSION = doGetVersion()
    PRERELEASE = doGetPreRelease()
    S3_BASE_URL = "${env.VERSION}/${env.PRERELEASE}-build/${env.PROJECT}/${env.BRANCH_NAME}"
    S3_BUILD_PATH = "${env.S3_BASE_URL}/${env.BUILD_NUMBER}"
    S3_LATEST_BUILD_PATH = "${env.S3_BASE_URL}/latest"
  }
  stages{
    stage ('flake8 and build') {
      environment {
        PATH = "/root/.local/bin:$PATH"
      }
      parallel{
        stage('flake8'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to separate workspace"
            container('py311'){
              dir("${env.WORKSPACE}/flake8") {
                echo 'install flake 8'
                sh 'pip install flake8 --user'
                echo 'run flake8'
                sh 'flake8 cloudify_agent'
              }
            }
          }
        }
        stage('build_agent'){
          steps{
            echo "this does nothing, and should be removed after the build_agent step is made non-required in github"
          }
        }
        stage('Deploy EC2 instances'){
          steps{
            catchError(message: 'Failure on: cloudify-agent tests', buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              container('py311'){
                echo 'Setup Github SSH key'
                setupGithubSSHKey()
                dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
                  withVault([configuration: configuration, vaultSecrets: secrets]){
                    sh script:'''#!/bin/bash
                      set -euxo pipefail
                      python -m venv .venv
                      source .venv/bin/activate

                      cfy profile use ${MANAGER_IP} -u ${MANAGER_USERNAME} -p ${MANAGER_PASSWORD} -t ${MANAGER_TENANT} --ssl
                      pushd 'bp'
                        cfy install -b ec2-cfy-agent-tests-blueprint-${BUILD_NUMBER} ec2-cfy-agent-tests-blueprint.yaml
                      popd
                      cfy deployments capabilities ec2-cfy-agent-tests-blueprint-${BUILD_NUMBER} --json > capabilities.json
                      jq -r '.key_content.value' capabilities.json > ~/.ssh/ec2_ssh_key && chmod 600 ~/.ssh/ec2_ssh_key
                      for i in {1..16};
                        do ssh-keyscan -H \$(jq -r '.endpoint.value' capabilities.json) >> ~/.ssh/known_hosts && break || sleep 10;
                      done
                      echo 'ClientAliveInterval 50' >> /etc/ssh/sshd_config
                    ''', label:'Configure and install blueprint on manager'
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('pytest and build rpm'){
      parallel {
        stage('Configure & Run-tests on EC2 instance'){
          steps{
            catchError(message: 'Failure on: cloudify-agent tests', buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              container('py311'){
                dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
                  withVault([configuration: configuration, vaultSecrets: secrets]){
                    sh script:"""
                      ssh -i ~/.ssh/ec2_ssh_key -l centos \$(jq -r '.endpoint.value' capabilities.json) /bin/bash -ex << 'EOT'
sudo find /etc/yum.repos.d/ -type f -name "*.repo" -print0 | xargs -0 sudo sed -i s/mirror.centos.org/vault.centos.org/g
sudo find /etc/yum.repos.d/ -type f -name "*.repo" -print0 | xargs -0 sudo sed -i s/^#.*baseurl=http/baseurl=http/g
sudo find /etc/yum.repos.d/ -type f -name "*.repo" -print0 | xargs -0 sudo sed -i s/^mirrorlist=http/#mirrorlist=http/g
# install & start rabbitmq
sudo yum install -y epel-release git wget
sudo yum install -y rabbitmq-server
sudo systemctl enable rabbitmq-server
sudo systemctl start rabbitmq-server

# setup python3.11
curl -fL --retry 5 \
  https://cloudify-cicd.s3.amazonaws.com/python-build-packages/cfy-python3.11-x86_64.tgz \
  -o cfy-python3.11.tgz
mkdir python3.11
tar --strip-components=2 -zxf cfy-python3.11.tgz -C python3.11
python3.11/bin/python3.11 -m venv venv
set +x  # going to activate the venv, hide activate output
. venv/bin/activate
set -x

# fetch the code
git clone https://github.com/cloudify-cosmo/cloudify-agent.git \
  --branch "${env.BRANCH_NAME}" \
  --single-branch \
  --depth 1

pushd cloudify-agent
  # install prereqs
  pip install --upgrade pip setuptools
  pip install -r test-requirements.txt
  pip install -r requirements.txt
  pip install '.[fabric]'

  # run all tests
  pytest \
    -sv \
    --run-rabbit-tests \
    --run-ci-tests \
    cloudify_agent \
    --junitxml=test-results/cloudify_agent_py3.xml
popd

EOT
                    """, label: 'Prepare instance and run pytests'
                  }
                }
              }
            }
          }
        }
        stage('build_rpm'){
          steps {
            container('rpmbuild'){
              sh script: '''
                cd ~/rpmbuild
                git clone https://github.com/cloudify-cosmo/cloudify-agent.git SOURCES && cd SOURCES && git checkout ${BRANCH_NAME}
              ''', label: 'Copying repo to separate workspace'
              sh script: '''
                curl -o ~/rpmbuild/SOURCES/cloudify-agents.spec https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/cloudify-agents.spec ;
                mkdir -p ~/rpmbuild/SOURCES/packaging/agents/ ;
                curl -o ~/rpmbuild/SOURCES/packaging/agents/copy_packages.py https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/agents/copy_packages.py ;
                ''', label: 'Prepare rpm-building environment'
              sh script: '''
                find /etc/yum.repos.d/ -type f -name "*.repo" -print0 | xargs -0 sed -i s/mirror.centos.org/vault.centos.org/g
                find /etc/yum.repos.d/ -type f -name "*.repo" -print0 | xargs -0 sed -i s/^#.*baseurl=http/baseurl=http/g
                find /etc/yum.repos.d/ -type f -name "*.repo" -print0 | xargs -0 sed -i s/^mirrorlist=http/#mirrorlist=http/g
              ''', label: 'Fix mirrorlist no longer available. See https://serverfault.com/questions/1161816/mirrorlist-centos-org-no-longer-resolve#answer-1161847'
              sh script: '''
                #!/usr/bin/env bash
                set -euxo pipefail
                cd ~/rpmbuild/SOURCES

                #--- build the agent here
                cp packaging/linux/linux_agent_builder.sh .
                chmod +x linux_agent_builder.sh
                ./linux_agent_builder.sh manylinux x86_64 ${VERSION}-${PRERELEASE}

                # retries because yum mirrors aren't always reliable
                for i in {1..30}; do yum-builddep -y cloudify-agents.spec && break || sleep 10; done
                spectool \
                  -d "CLOUDIFY_VERSION ${VERSION}" \
                  -d "CLOUDIFY_PACKAGE_RELEASE ${PRERELEASE}" \
                  -P cloudify-agents.spec \
                  -S -g
                rpmbuild \
                  -D "CLOUDIFY_VERSION ${VERSION}" \
                  -D "CLOUDIFY_PACKAGE_RELEASE ${PRERELEASE}" \
                  -bb cloudify-agents.spec
                ''', label: 'Building a CI agent rpm'
              sh script:("mkdir -p ${WORKSPACE}/rpm && cp -rf ~/rpmbuild/RPMS/noarch/. ${WORKSPACE}/rpm"), label: "Copy RPM to rpm folder"
            }
          }
          post {
            success {
              uploadToReleaseS3("${env.WORKSPACE}/rpm/","${env.S3_BUILD_PATH}")
              uploadToReleaseS3("${env.WORKSPACE}/rpm/","${env.S3_LATEST_BUILD_PATH}")
              archiveArtifacts '**/rpm/*.rpm'
            }
          }
        }
        stage('Windows-Build'){
          agent{
            label 'windows'
          }
          environment {
            TOX_ENV = 'pywin'
            ERLANG_DOWNLOAD_URL = 'https://github.com/erlang/otp/releases/download/OTP-21.3/otp_win64_21.3.exe'
            ERLANG_INSTALLER_PATH = 'C:\\erlang_install.exe'
            RABBITMQ_DOWNLOAD_URL = 'https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.4/rabbitmq-server-3.8.4.exe'
            RABBITMQ_INSTALLER_PATH = 'C:\\rabbitmq_install.exe'
            PYTHON = 'C:\\Python36'
          }
          options {
            checkoutToSubdirectory('cloudify-agent')
            timeout(time: 60, unit: 'MINUTES')
            timestamps()
          }
          steps{
            catchError(message: 'Failure on: cloudify-agent tests', buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              
              echo 'Install python'
              powershell """
                choco install -y python --version=3.11.0
              """
              echo 'Configure python'
              powershell """
                \$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
                python --version
                python -c "import struct; print(struct.calcsize('P') * 8)"
                echo Upgrading pip...
                python -m pip install pip
                pip --version
                cd C:\\projects\\cloudify-agent
                git status
                git checkout ${env.BRANCH_NAME}
                python -m pip install virtualenv
                echo 'Installing dependencies'
                python -m venv env
                .\\env\\Scripts\\activate
                python -m pip install --upgrade pip setuptools
                python -m pip install -r requirements.txt
                python -m pip install -r test-requirements.txt
                python -m pip install .
                pytest -sv --run-ci-tests cloudify_agent\\tests
              """
              
            }
          }
        }
      }
    }
    stage('Copy test results'){
      steps{
        catchError(message: 'Failure on: cloudify-agent tests copy', buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          container('py311'){
            dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
              withVault([configuration: configuration, vaultSecrets: secrets]){
                sh script:"""#!/bin/bash
                mkdir -p ${env.WORKSPACE}/${env.PROJECT}/jenkins/test-results
                scp -i ~/.ssh/ec2_ssh_key centos@\$(cat capabilities.json | jq '.endpoint.value' | tr -d '"'):"~/cloudify-agent/test-results/*.xml" ${env.WORKSPACE}/${env.PROJECT}/jenkins/test-results/
                """, label: 'Copy test results'
              }
            }
          }
        }
      }
    }
    stage('Terminate py311 instance'){
      steps{
        catchError(message: 'Failure on: cloudify-agent tests', buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          container('py311'){
            dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
              withVault([configuration: configuration, vaultSecrets: secrets]){
                echo 'Uninstall and delete blueprint from manager'
                sh """#!/bin/bash
                  set -euxo pipefail
                  source .venv/bin/activate
                  cfy uninstall ec2-cfy-agent-tests-blueprint-${env.BUILD_NUMBER} --force --allow-custom-parameters -p ignore_failure=true
                """
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      junit '**/test-results/*.xml'
      findText(textFinders: [
        textFinder(regexp: 'Failure on:*', fileSet: '', alsoCheckConsoleOutput: true, buildResult: 'FAILURE')
        ]
      )
    }
  }
}
