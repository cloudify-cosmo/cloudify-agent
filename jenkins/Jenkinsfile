// def install_cron() {
//     echo 'install and run cron'
//     sh '''
//       apt-get update
//       apt-get install -y cron
//     '''
// }
// def install_test_dependencies() {
//   sh '''#!/bin/bash
//   ~/venv/bin/pip install -r dev-requirements.txt
//   ~/venv/bin/pip install -r test-requirements.txt
//   ~/venv/bin/pip install -e '.[fabric]'
//   '''
// }
// def pytest() {
//   echo 'running pytest'
//   sh '''#!/bin/bash
//     source ~/venv/bin/activate
//     ~/venv/bin/pytest --run-rabbit-tests --run-ci-tests --cov-report term-missing --cov=cloudify_agent cloudify_agent/tests/api/pm/test_detach.py::test_delete --junitxml=test-results/cloudify_agent.xml
//   '''
  //    -s --pdb cloudify_agent/tests/api/pm/test_detach.py::test_delete \
  // ~/venv/bin/pytest \
    // --run-rabbit-tests \
    // --run-ci-tests \
    // --cov-report term-missing \
    // --cov=cloudify_agent \
    // cloudify_agent/tests \
    // --junitxml=test-results/cloudify_agent.xml
// }

 def configuration = [vaultUrl: "${VAULT_URL}",  vaultCredentialId: "vault-app-role", engineVersion: 2]

def secrets = [
  [path: 'secret/jenkins/cloudify', engineVersion: 2, secretValues: [
    [envVar: 'OS_USERNAME', vaultKey: 'username'],
    [envVar: 'OS_TENANT', vaultKey: 'tenant'],
    [envVar: 'OS_IP', vaultKey: 'ip'],
    [envVar: 'OS_PASSWORD', vaultKey: 'password']]],
]

@Library('pipeline-shared-library') _

pipeline {
  agent {
    kubernetes {
      label "agent-${env.BUILD_NUMBER}"
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }
  options {
    checkoutToSubdirectory('cloudify-agent')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  environment {
    VERSION = getVersion("master").trim()
    PRERELEASE = getPreRelease("master").trim()
    WORKSPACE = "${env.WORKSPACE}"
    PROJECT = "cloudify-agent"
    PATH = "/root/.local/bin:$PATH"
  }
  stages{
    // stage ('compatability and flake8') {
    //   parallel{
    //     stage ('py3_compat'){
    //       steps{
    //         sh script: "mkdir -p ${env.WORKSPACE}/py3_compat && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/py3_compat", label: "copying repo to seperate workspace"
    //         container('py27'){
    //           dir("${env.WORKSPACE}/py3_compat"){
    //             echo 'install futurize'
    //             sh 'pip install future --user'
    //             echo 'find python3-incompatible code'
    //             sh '''#!/bin/bash
    //             FUTURIZE="futurize ."
    //             while read line; do
    //               FUTURIZE="${FUTURIZE} ${line}"
    //             done<.circleci/py3fixers
    //             $FUTURIZE>futurize_diffs
    //             '''
    //             echo 'check that there is no python3-incompatible code'
    //             sh """ #!/bin/bash
    //             if [ -s futurize_diffs ]; then
    //               echo "Python-3-incompatible code found"
    //               cat futurize_diffs
    //               exit 1
    //             fi          
    //             """
    //           }
    //         }
    //       }
    //     }
    //     stage('flake8_py27'){
    //       steps{
    //         sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
    //         container('py27'){
    //           dir("${env.WORKSPACE}/flake8") {
    //             echo 'install flake 8'
    //             sh 'pip install flake8 --user'
    //             echo 'run flake8'
    //             sh 'flake8 cloudify_agent'
    //           }
    //         }
    //       }
    //     }
    //     stage('flake8_py36'){
    //       steps{
    //         sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
    //         container('py36'){
    //           dir("${env.WORKSPACE}/flake8") {
    //             echo 'install flake 8'
    //             sh 'pip install flake8 --user'
    //             echo 'run flake8'
    //             sh 'flake8 cloudify_agent'
    //           }
    //         }
    //       }
    //     }
    //     stage('build_agent'){
    //       steps{
    //         sh script: "mkdir -p ${env.WORKSPACE}/build_agent && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/build_agent", label: "copying repo to seperate workspace"
    //         container('centos7'){
    //           dir("${env.WORKSPACE}/build_agent") {
    //             echo 'install packages'
    //             sh '''
    //               curl -O https://bootstrap.pypa.io/get-pip.py
    //               python get-pip.py
    //               yum install -y python-devel git gcc gcc-c++
    //               '''
    //             sh script: 'pip install https://github.com/cloudify-cosmo/cloudify-agent-packager/archive/master.zip', label: 'installing agent packager'
    //             echo 'creating the agent packager'
    //             sh script: '''
    //               cfy-ap -c packaging/local.ini -f -v
    //               '''
    //           }
    //         }
    //       }
    //     }
          stage('Deploy EC2 instances'){
            steps{
              catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                repoCheckout("https://github.com/cloudify-cosmo/cloudify-agent.git", "${env.PROJECT}", "CY-3099-migrate-jenkinsfile")

                container('py27'){
                  setupGithubSSHKey()
                  dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
                    withVault([configuration: configuration, vaultSecrets: secrets]){
                      // change blueprint name to mine
                      sh """#!/bin/bash
                        apt-get update
                        python -m ensurepip --upgrade
                        python -m pip install --upgrade pip
                        python -m pip install --upgrade virtualenv

                        virtualenv .venv
                        source .venv/bin/activate

                        pip install cloudify==5.1.0
                        cfy profile use ${env.OS_IP} -u ${env.OS_USERNAME} -p ${env.OS_PASSWORD} -t ${env.OS_TENANT}
                        pushd 'bp'
                          cfy install -b ec2-py27-blueprint ec2-py27-blueprint.yaml
                        popd
                        cfy deployments capabilities ec2-py27-blueprint --json > capabilities.json
                        echo -e \$(cat capabilities.json | jq '.key_content.value' | tr -d '"') > ~/.ssh/ec2_ssh_key && chmod 600 ~/.ssh/ec2_ssh_key
                        sleep 120
                        ssh-keyscan -H \$(cat capabilities.json | jq '.endpoint.value' | tr -d '"') >> ~/.ssh/known_hosts
                      """
                    }
                  }
                }
              }
            }
          }
    //   }
    // }
    // stage('pytest and build rpm'){
      // parallel {
        // stage('test_py27'){
        //   steps{
        //     sh script: "mkdir -p ${env.WORKSPACE}/test_py27 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test_py27", label: "copying repo to seperate workspace"
        //     container('py27'){
        //       dir("${env.WORKSPACE}/test_py27"){
        //         // echo 'prepare'
        //         // sh '''
        //         //   apt-get update
        //         //   apt-get install -y python-pip
        //         //   apt-get install sudo
        //         //   '''
        //         //sh 'sleep 9000'
        //         install_cron()
        //         echo 'install and create virtual env'
        //         sh '''
        //           pip install virtualenv==15.1.0 --user
        //           virtualenv ~/venv
        //           '''
        //           // export PATH=$PATH:/root/.local/bin
        //           // sudo -H pip install virtualenv==15.1.0 --user
        //         install_test_dependencies()
        //         //sh 'sleep 9000'
        //         pytest()
        //       }
        //     }
        //   }
        //   post {
        //     always {
        //       junit '**/test-results/*.xml'
        //     }
        //   }
        // }
        stage('Configure & Run-tests py27 on EC2 instance'){
          steps{
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
              container('py27'){
                dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
                  echo 'Prepare instance and run pytests'
                  sh "ssh -i ~/.ssh/ec2_ssh_key -l centos \$(cat capabilities.json | jq '.endpoint.value' | tr -d '\"') /bin/bash < configure_py27.sh"
                }
              }
            }
          }
        }
        // stage('Configure & Run-tests py36 on EC2 instance'){
        //   steps{
        //     catchError(buildResult: 'SUCESS', stageResult: 'FAILURE'){
        //       container('py36'){
        //         dir("${env.WORKSPACE}/${env.PROJECT}"){
        //           echo 'Prepare instance and run pytests'
        //           sh "ssh -i ~/.ssh/ec2_ssh_key -l centos \$(cat capabilities.json | jq '.endpoint.value' | tr -d '\"') /bin/bash < configure_py36.sh"
        //         }
        //       }
        //     }
        //   }
        // }
        // stage('test_py36'){
        //   steps{
        //     sh script: "mkdir -p ${env.WORKSPACE}/test_py36 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test_py36", label: "copying repo to seperate workspace"
        //     container('py36'){
        //       dir("${env.WORKSPACE}/test_py36"){
        //         install_cron()
        //         echo 'install and create virtual env'
        //         sh 'virtualenv ~/venv'
        //         install_test_dependencies()
        //         pytest()
        //       }
        //     }
        //   }
        //   post {
        //     always {
        //       junit '**/test-results/*.xml'
        //     }
        //   }
        // }
        // stage('build_rpm'){
        //   steps {
        //     container('rpmbuild'){
        //       sh script: '''
        //         cd && mkdir rpmbuild && cd rpmbuild
        //         git clone https://github.com/cloudify-cosmo/cloudify-agent.git SOURCES && cd SOURCES
        //       ''', label: 'Copying repo to seperate workspace'
        //       sh script: '''
        //         chmod a+wx /opt
        //         curl -o ~/rpmbuild/SOURCES/cloudify-agents.spec https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/cloudify-agents.spec ;
        //         mkdir -p ~/rpmbuild/SOURCES/packaging/agents/ ;
        //         curl -o ~/rpmbuild/SOURCES/packaging/agents/copy_packages.py https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/agents/copy_packages.py ;
        //         ''', label: 'Prepare rpm-building environment'
        //       sh script: """
        //         cd ~/rpmbuild/SOURCES
        //         rpmbuild \
        //           -D "CLOUDIFY_VERSION ${env.VERSION}" \
        //           -D "CLOUDIFY_PACKAGE_RELEASE ${env.PRERELEASE}" \
        //           -bb cloudify-agents.spec
        //         """, label: 'Building a CI agent rpm'
        //       sh script:("mkdir -p ${env.WORKSPACE}/rpm && cp -rf ~/rpmbuild/RPMS/noarch/. ${env.WORKSPACE}/rpm"), label: "Copy RPM to rpm folder"
        //     }
        //   }
        //   post {
        //     success {
        //       archiveArtifacts '**/rpm/*.rpm'
        //     }
        //   }
        // }
      // }
    // }
    stage('Terminate EC2 instances'){
      parallel{
        stage('Terminate py27 instnace'){
          steps{
            container('py27'){
              dir("${env.WORKSPACE}/${env.PROJECT}"){
                withVault([configuration: configuration, vaultSecrets: secrets]){
                  sh """#!/bin/bash
                    cfy uninstall ec2-py27-blueprint
                  """
                }
              }
            }
          }
        }
        // stage('Terminate py36 instnace'){
        //   steps{
        //     container('py36'){
        //       dir("${env.WORKSPACE}/${env.PROJECT}"){
        //         withVault([configuration: configuration, vaultSecrets: secrets]){
        //           sh """#!/bin/bash
        //             cfy uninstall ec2-py36-blueprint
        //           """
        //         }
        //       }
        //     }
        //   }
        // }
      }
    }
  }
}
