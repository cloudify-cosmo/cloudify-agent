// def install_cron() {
//     echo 'install and run cron'
//     sh '''
//       sudo apt-get update
//       sudo apt-get install -y cron
//     '''
// }
// def install_test_dependencies(String cache_prefix) {
//   sh '''#!/bin/bash
//   pip install -r dev-requirements.txt --user
//   pip install -r test-requirements.txt --user
//   pip install -e '.[fabric]' --user
//   '''
// }
// def pytest() {
//   echo 'running pytest'
//   sh '''
//     source ~/venv/bin/activate
//     ~/venv/bin/pytest \
//     --run-rabbit-tests \
//     --run-ci-tests \
//     --cov-report term-missing \
//     --cov=cloudify_agent cloudify_agent \
//     --junitxml=test-results/cloudify_agent.xml
//   '''
// }
@Library('pipeline-shared-library') _
pipeline {
  agent {
    kubernetes {
      label "agent-${env.BUILD_NUMBER}"
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }
  options {
    checkoutToSubdirectory('cloudify-agent')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  environment {
    VERSION = getVersion("master").trim()
    PRERELEASE = getPreRelease("master").trim()
    WORKSPACE = "${env.WORKSPACE}"
    PROJECT = "cloudify-agent"
    PATH = "/root/.local/bin:$PATH"
  }
  stages{
    stage ('compatability and flake8') {
      parallel{
        stage ('py3_compat'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/py3_compat && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/py3_compat", label: "copying repo to seperate workspace"
            container('py27'){
              dir("${env.WORKSPACE}/py3_compat"){
                echo 'install futurize'
                sh 'pip install future --user'
                echo 'find python3-incompatible code'
                sh '''#!/bin/bash
                FUTURIZE="futurize ."
                while read line; do
                  FUTURIZE="${FUTURIZE} ${line}"
                done<.circleci/py3fixers
                $FUTURIZE>futurize_diffs
                '''
                echo 'check that there is no python3-incompatible code'
                sh """ #!/bin/bash
                if [ -s futurize_diffs ]; then
                  echo "Python-3-incompatible code found"
                  cat futurize_diffs
                  exit 1
                fi          
                """
              }
            }
          }
        }
        stage('flake8_py27'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py27'){
              dir("${env.WORKSPACE}/flake8") {
                echo 'install flake 8'
                sh 'pip install flake8 --user'
                echo 'run flake8'
                sh 'flake8 cloudify_agent'
              }
            }
          }
        }
        stage('flake8_py36'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py36'){
              dir("${env.WORKSPACE}/flake8") {
              echo 'install flake 8'
              sh 'pip install flake8 --user'
              echo 'run flake8'
              sh 'flake8 cloudify_agent'
              }
            }
          }
        }
        stage('build_agent'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/build_agent && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/build_agent", label: "copying repo to seperate workspace"
            container('centos7'){
              dir("{env.WORKSPACE}/build_agent") {
              sh '''
                curl -O https://bootstrap.pypa.io/get-pip.py
                python get-pip.py
                yum install -y python-devel git gcc gcc-c++
                '''
              sh script: 'pip install https://github.com/cloudify-cosmo/cloudify-agent-packager/archive/master.zip', label: 'installing agent packager'
              echo 'creating the agent packager'
              sh script: '''
                ls -l
                cfy-ap -c packaging/local.ini -f -v
                '''
              }
            }
          }
        }
      }
    }
  }
}
