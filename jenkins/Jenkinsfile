def configuration = [vaultUrl: "${VAULT_URL}",  vaultCredentialId: "vault-app-role", engineVersion: 2]

def secrets = [
  [path: 'secret/jenkins/cloudify', engineVersion: 2, secretValues: [
    [envVar: 'OS_USERNAME', vaultKey: 'username'],
    [envVar: 'OS_TENANT', vaultKey: 'tenant'],
    [envVar: 'OS_IP', vaultKey: 'ip'],
    [envVar: 'OS_PASSWORD', vaultKey: 'password']]],
]

@Library('pipeline-shared-library') _

pipeline {
  agent {
    kubernetes {
      label "cloudify-agent-${env.BUILD_NUMBER}"
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }
  options {
    checkoutToSubdirectory('cloudify-agent')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  environment {
    VERSION = getVersion("master").trim()
    PRERELEASE = getPreRelease("master").trim()
    PROJECT = "cloudify-agent"
    PATH = "/root/.local/bin:$PATH"
  }
  stages{
    stage ('compatability and flake8') {
      parallel{
        stage ('py3_compat'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/py3_compat && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/py3_compat", label: "copying repo to seperate workspace"
            container('py27'){
              dir("${env.WORKSPACE}/py3_compat"){
                py3Compat()
              }
            }
          }
        }
        stage('flake8_py27'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py27'){
              dir("${env.WORKSPACE}/flake8") {
                echo 'install flake 8'
                sh 'pip install flake8 --user'
                echo 'run flake8'
                sh 'flake8 cloudify_agent'
              }
            }
          }
        }
        stage('flake8_py36'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py36'){
              dir("${env.WORKSPACE}/flake8") {
                echo 'install flake 8'
                sh 'pip install flake8 --user'
                echo 'run flake8'
                sh 'flake8 cloudify_agent'
              }
            }
          }
        }
        stage('build_agent'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/build_agent && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/build_agent", label: "copying repo to seperate workspace"
            container('centos7'){
              dir("${env.WORKSPACE}/build_agent") {
                echo 'install packages'
                sh '''
                  curl -O https://bootstrap.pypa.io/get-pip.py
                  python get-pip.py
                  yum install -y python-devel git gcc gcc-c++
                  '''
                sh script: 'pip install https://github.com/cloudify-cosmo/cloudify-agent-packager/archive/master.zip', label: 'installing agent packager'
                echo 'creating the agent packager'
                sh script: '''
                  cfy-ap -c packaging/local.ini -f -v
                  '''
              }
            }
          }
        }
        stage('Deploy EC2 instances'){
          steps{
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
              container('py27'){
                echo 'Setup Github SSH key'
                setupGithubSSHKey()
                dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
                  withVault([configuration: configuration, vaultSecrets: secrets]){
                    sh script:"""#!/bin/bash
                      apt-get update
                      python -m ensurepip --upgrade
                      python -m pip install --upgrade pip
                      python -m pip install --upgrade virtualenv

                      virtualenv .venv
                      source .venv/bin/activate

                      pip install cloudify==5.1.0
                      cfy profile use ${env.OS_IP} -u ${env.OS_USERNAME} -p ${env.OS_PASSWORD} -t ${env.OS_TENANT}
                      pushd 'bp'
                        cfy install -b ec2-py27-blueprint ec2-py27-blueprint.yaml
                      popd
                      cfy deployments capabilities ec2-py27-blueprint --json > capabilities.json
                      echo -e \$(cat capabilities.json | jq '.key_content.value' | tr -d '"') > ~/.ssh/ec2_ssh_key && chmod 600 ~/.ssh/ec2_ssh_key
                      sleep 160
                      ssh-keyscan -H \$(cat capabilities.json | jq '.endpoint.value' | tr -d '"') >> ~/.ssh/known_hosts
                    """, label:'Configure and install blueprint on manager'
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('pytest and build rpm'){
      parallel {
        stage('Configure & Run-tests py27 on EC2 instance'){
          steps{
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
              container('py27'){
                dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
                  withVault([configuration: configuration, vaultSecrets: secrets]){
                    sh script:"""#!/bin/bash
                      ssh -i ~/.ssh/ec2_ssh_key -l centos \$(cat capabilities.json | jq '.endpoint.value' | tr -d '"') /bin/bash << 'EOT'
sudo yum install -y epel-release git vim python-virtualenv
sudo yum install -y rabbitmq-server
sudo yum install -y wget
git clone https://github.com/cloudify-cosmo/cloudify-agent.git
sudo systemctl enable rabbitmq-server
sudo systemctl start rabbitmq-server
virtualenv py2
source py2/bin/activate
pushd cloudify-agent
pip install -r test-requirements.txt
pip install -r dev-requirements.txt
pip install '.[fabric]'
pytest --run-rabbit-tests --run-ci-tests --cov-report term-missing --cov=cloudify_agent cloudify_agent --junitxml=test-results/cloudify_agent_py2.xml
popd
deactivate
sudo yum install -y python3
python3 -m venv py3
source py3/bin/activate
export LC_ALL=en_US.utf-8
export LANG=en_US.utf-8
pushd cloudify-agent
pip install -r test-requirements.txt
pip install -r dev-requirements.txt
pip install '.[fabric]'
pytest --run-rabbit-tests --run-ci-tests --cov-report term-missing --cov=cloudify_agent cloudify_agent --junitxml=test-results/cloudify_agent_py3.xml
popd
deactivate
EOT
                    """, label: 'Prepare instance and run pytests'
                    sh script:"""
                      mkdir ${env.WORKSPACE}/${env.PROJECT}/jenkins/test-results
                      scp -i ~/.ssh/ec2_ssh_key centos@\$(cat capabilities.json | jq '.endpoint.value' | tr -d '"'):"~/cloudify-agent/test-results/*.xml" ${env.WORKSPACE}/${env.PROJECT}/jenkins/test-results/
                      """, label: 'copy test results'
                  }
                }
              }
            }
          }
          post {
            if (fileExists('**/test-resutls/*.xml')){
              always {
                junit '**/test-results/*.xml'
              }
            }
            else {
              echo 'no test results to archive'
            }
          }
        }
        stage('build_rpm'){
          steps {
            container('rpmbuild'){
              sh script: '''
                cd && mkdir rpmbuild && cd rpmbuild
                git clone https://github.com/cloudify-cosmo/cloudify-agent.git SOURCES && cd SOURCES
              ''', label: 'Copying repo to seperate workspace'
              sh script: '''
                chmod a+wx /opt
                curl -o ~/rpmbuild/SOURCES/cloudify-agents.spec https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/cloudify-agents.spec ;
                mkdir -p ~/rpmbuild/SOURCES/packaging/agents/ ;
                curl -o ~/rpmbuild/SOURCES/packaging/agents/copy_packages.py https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/packaging/agents/copy_packages.py ;
                ''', label: 'Prepare rpm-building environment'
              sh script: """
                cd ~/rpmbuild/SOURCES
                rpmbuild \
                  -D "CLOUDIFY_VERSION ${env.VERSION}" \
                  -D "CLOUDIFY_PACKAGE_RELEASE ${env.PRERELEASE}" \
                  -bb cloudify-agents.spec
                """, label: 'Building a CI agent rpm'
              sh script:("mkdir -p ${env.WORKSPACE}/rpm && cp -rf ~/rpmbuild/RPMS/noarch/. ${env.WORKSPACE}/rpm"), label: "Copy RPM to rpm folder"
            }
          }
          post {
            success {
              archiveArtifacts '**/rpm/*.rpm'
            }
          }
        }
      }
    }
    stage('Terminate py27 instnace'){
      steps{
        container('py27'){
          dir("${env.WORKSPACE}/${env.PROJECT}/jenkins"){
            withVault([configuration: configuration, vaultSecrets: secrets]){
              echo 'Uninstall and delete blueprint from manager'
              sh """#!/bin/bash
                source .venv/bin/activate
                cfy uninstall ec2-py27-blueprint --force --allow-custom-parameters -p ignore_failures=true
              """
            }
          }
        }
      }
    }
  }
}
  
